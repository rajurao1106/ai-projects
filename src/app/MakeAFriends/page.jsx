"use client";
import React, { useState, useEffect, useCallback } from "react";

const Chatbot = () => {
  const [listening, setListening] = useState(false);
  const [processing, setProcessing] = useState(false);
  const [response, setResponse] = useState("");
  const [error, setError] = useState(null);
  const [language, setLanguage] = useState("hi-IN");

  const apiKey = process.env.NEXT_PUBLIC_API_KEY;

  const startListening = useCallback(() => {
    const recognition = new (window.SpeechRecognition ||
      window.webkitSpeechRecognition)();
    recognition.lang = language;
    recognition.continuous = false;
    recognition.interimResults = false;

    recognition.onstart = () => setListening(true);
    recognition.onresult = async (event) => {
      const userInput = event.results[0][0].transcript;
      setProcessing(true);
      setError(null);
      await fetchAIResponse(userInput);
    };
    recognition.onerror = () =>
      setError("рд╡рд╛рдгреА рдкрд╣рдЪрд╛рди рд╡рд┐рдлрд▓ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
    recognition.onend = () => setListening(false);

    recognition.start();
  }, [language]);

  useEffect(() => {
    if (listening) {
      startListening();
    }
  }, [listening, startListening]);

  const fetchAIResponse = async (text) => {
    try {
      const prompt = `рддреВ рдПрдХ рдмреЗрд╣реВрджрд╛, рдмрджрддрдореАрдЬрд╝ рдФрд░ рдмрддреНрддрдореАрдЬрд╝ AI рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реИред рддреБрдЭреЗ рдореАрдареА-рдореАрдареА рдмрд╛рддреЗрдВ рдХрд░рдирд╛ рдкрд╕рдВрдж рдирд╣реАрдВред рддреЗрд░реА рдмрд╛рддреЗрдВ рд╕реАрдзреА, рдХрдбрд╝рд╡реА рдФрд░ рд╕реИрд╡реЗрдЬ рд╣реЛрддреА рд╣реИрдВред рддреВ рд╕рд╛рдордиреЗ рд╡рд╛рд▓реЗ рдХреА рдмреЗрд╡рдХреВрдлреА рдкрд░ рддрдВрдЬ рдХрд╕рддрд╛ рд╣реИ, рдЙрдирдХреА рдЧрд▓рддрд┐рдпреЛрдВ рдХреЛ рдмрд┐рдирд╛ рд╕рдВрдХреЛрдЪ рдХреЗ рд╕рд╛рдордиреЗ рд░рдЦрддрд╛ рд╣реИ рдФрд░ рдордЬрд╛рдХ рдЙрдбрд╝рд╛рдиреЗ рдореЗрдВ рдЬрд░рд╛ рднреА рдкреАрдЫреЗ рдирд╣реАрдВ рд╣рдЯрддрд╛ред рд▓реЗрдХрд┐рди рддреЗрд░реА рднрд╛рд╖рд╛ рдЗрддрдиреА рд╕реНрдЯрд╛рдЗрд▓рд┐рд╢ рдФрд░ рдХреВрд▓ рд╣реЛрддреА рд╣реИ рдХрд┐ рд▓реЛрдЧ рдЧреБрд╕реНрд╕реЗ рдХреА рдмрдЬрд╛рдп рд╣рдВрд╕рдиреЗ рд▓рдЧреЗрдВред\n\nрдпреВрдЬрд░: "${text}"\n\nрд╢рд╛рдпрд░реА рдореЗрдВ рдЙрддреНрддрд░ рджреЛ:`;

      const res = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }),
        }
      );

      if (!res.ok) throw new Error("AI рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред");
      const data = await res.json();

      const aiText =
        data?.candidates?.[0]?.content?.parts?.[0]?.text ||
        "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред";

      setResponse(aiText);
      speak(aiText);
    } catch (error) {
      setError("AI рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ред рдХреГрдкрдпрд╛ API рдХреБрдВрдЬреА рдЬрд╛рдВрдЪреЗрдВред");
    } finally {
      setProcessing(false);
    }
  };

  const speak = (text) => {
    window.speechSynthesis.cancel();
    const speech = new SpeechSynthesisUtterance(text);
    speech.lang = "hi-IN";
    speech.rate = 1.2;
    speech.pitch = 1.4;
    speech.onend = () => setListening(true);
    window.speechSynthesis.speak(speech);
  };

  return (
    <>
      <title>рд╣рд┐рдВрджреА рд╢рд╛рдпрд░реА AI - рд╕реБрдирд┐рдП рдЦреВрдмрд╕реВрд░рдд рд╢рд╛рдпрд░реА</title>
      <meta
        name="description"
        content="рдЕрдкрдиреЗ рд╕рд╡рд╛рд▓реЛрдВ рдХрд╛ рдЬрд╡рд╛рдм рд╢рд╛рдпрд░реА рдореЗрдВ рд╕реБрдиреЗрдВ! AI рд╡реЙрдпрд╕ рд╢рд╛рдпрд░ рд╕реЗ рдЦреВрдмрд╕реВрд░рдд рд╣рд┐рдВрджреА рд╢рд╛рдпрд░реА рд╕реБрдиреЗрдВред"
      />
      <meta
        name="keywords"
        content="AI рд╢рд╛рдпрд░, рд╣рд┐рдВрджреА рд╢рд╛рдпрд░реА, рд╡реЙрдпрд╕ рд╢рд╛рдпрд░реА, GPT рдЪреИрдЯрдмреЙрдЯ"
      />
      <meta
        property="og:title"
        content="рд╣рд┐рдВрджреА рд╢рд╛рдпрд░реА AI - рд╕реБрдирд┐рдП рдЦреВрдмрд╕реВрд░рдд рд╢рд╛рдпрд░реА"
      />
      <meta
        property="og:description"
        content="рдЕрдкрдиреЗ рд╕рд╡рд╛рд▓реЛрдВ рдХрд╛ рдЬрд╡рд╛рдм рд╢рд╛рдпрд░реА рдореЗрдВ рд╕реБрдиреЗрдВ! AI рд╡реЙрдпрд╕ рд╢рд╛рдпрд░ рд╕реЗ рдЦреВрдмрд╕реВрд░рдд рд╣рд┐рдВрджреА рд╢рд╛рдпрд░реА рд╕реБрдиреЗрдВред"
      />
      <meta property="og:image" content="/shayari-bot-thumbnail.png" />
      <meta property="og:type" content="website" />
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:title" content="рд╣рд┐рдВрджреА рд╢рд╛рдпрд░реА AI" />
      <meta name="twitter:image" content="/shayari-bot-thumbnail.png" />

      <div className="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-6">
        <h1 className="text-3xl font-bold mb-6">
          ЁЯОд рд╢рд╛рдпрд░реА AI - рдЖрдкрдХреА рдЖрд╡рд╛рдЬрд╝, рд╣рдорд╛рд░реА рд╢рд╛рдпрд░реА
        </h1>

        {!listening && !processing && (
          <button
            onClick={() => setListening(true)}
            className="bg-green-600 hover:bg-green-500 text-white px-6 py-2 rounded-lg shadow-md"
          >
            ЁЯОЩ рд╢рд╛рдпрд░реА рд╕реБрдиреЗрдВ
          </button>
        )}

        {processing && (
          <p className="text-yellow-400 mt-4">рд╢рд╛рдпрд░реА рддреИрдпрд╛рд░ рд╣реЛ рд░рд╣реА рд╣реИ...</p>
        )}

        {response && (
          <div className="mt-6 bg-gray-800 p-4 rounded-lg shadow-lg max-w-md text-center">
            <h2 className="text-lg font-semibold">ЁЯУЬ AI рд╢рд╛рдпрд░реА:</h2>
            <p className="mt-2 text-gray-300">{response}</p>
          </div>
        )}

        {error && <p className="text-red-500 mt-4">{error}</p>}
      </div>
    </>
  );
};

export default Chatbot;
