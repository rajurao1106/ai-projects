"use client";
import React, { useState, useEffect, useCallback } from "react";

const Chatbot = () => {
  const [listening, setListening] = useState(false);
  const [processing, setProcessing] = useState(false);
  const [response, setResponse] = useState("");
  const [error, setError] = useState(null);
  const [language, setLanguage] = useState("hi-IN");
  const [jokeMode, setJokeMode] = useState(false);

  const apiKey = process.env.NEXT_PUBLIC_API_KEY;

  const startListening = useCallback(() => {
    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = language;
    recognition.continuous = false;
    recognition.interimResults = false;

    recognition.onstart = () => {
      console.log("ЁЯОд Speech recognition started");
      setListening(true);
    };

    recognition.onresult = async (event) => {
      const userInput = event.results[0][0].transcript;
      console.log("ЁЯЧгя╕П User said:", userInput);
      setProcessing(true);
      setError(null);
      await fetchAIResponse(userInput);
    };

    recognition.onerror = (event) => {
      console.error("ЁЯЪи Speech recognition error:", event.error);
      setError("рд╡рд╛рдгреА рдкрд╣рдЪрд╛рди рд╡рд┐рдлрд▓ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
    };

    recognition.onend = () => {
      console.log("тП╣я╕П Speech recognition stopped");
      setListening(false);
    };

    recognition.start();
  }, [language]);

  useEffect(() => {
    if (listening) {
      startListening();
    }
  }, [listening, startListening]);

  const fetchAIResponse = async (text) => {
    try {
      const prompt = jokeMode
        ? `рддреБрдо рдПрдХ рд╢рд╛рдпрд░ рдХреА рддрд░рд╣ рдмреЛрд▓реЛ рдФрд░ рдпреВрдЬрд░ рджреНрд╡рд╛рд░рд╛ рдкреВрдЫреЗ рдЧрдП рд╕рд╡рд╛рд▓ рдХрд╛ рдЙрддреНрддрд░ рд╣рд┐рдВрджреА рд╢рд╛рдпрд░реА рдореЗрдВ рджреЛред\n\nрдпреВрдЬрд░ рдиреЗ рдХрд╣рд╛: "${text}"`
        : `рдпреВрдЬрд░ рдиреЗ рд╣рд┐рдВрджреА рдореЗрдВ рдХреБрдЫ рдХрд╣рд╛: "${text}" рдХреГрдкрдпрд╛ рдЗрд╕рдХрд╛ рдЙрддреНрддрд░ рд╣рд┐рдВрджреА рдореЗрдВ рджреЗрдВред`;

      console.log("ЁЯУй API Prompt:", prompt);

      const res = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }),
        }
      );

      if (!res.ok) {
        throw new Error("AI рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред");
      }

      const data = await res.json();
      console.log("ЁЯдЦ API Response:", data);

      const aiText =
        data?.candidates?.[0]?.content?.parts?.[0]?.text || "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред";

      console.log("ЁЯОн AI Output:", aiText);

      setResponse(aiText);
      speak(aiText);
    } catch (error) {
      console.error("ЁЯЪи AI Fetch Error:", error);
      setError("AI рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ред рдХреГрдкрдпрд╛ API рдХреБрдВрдЬреА рдЬрд╛рдВрдЪреЗрдВред");
    } finally {
      setProcessing(false);
    }
  };

  const speak = (text) => {
    console.log("ЁЯФК Speaking:", text);
    window.speechSynthesis.cancel(); // Stops any previous speech
    const speech = new SpeechSynthesisUtterance(text);
    speech.lang = "hi-IN";
    speech.rate = jokeMode ? 1.2 : 1;
    speech.pitch = jokeMode ? 1.5 : 1;
    speech.onend = () => setListening(true);
    window.speechSynthesis.speak(speech);
  };

  return (
    <>
      <title>рд╣рд┐рдВрджреА рд╡реЙрдпрд╕ AI рдЪреИрдЯрдмреЙрдЯ - рдмреЛрд▓рдХрд░ рдЙрддреНрддрд░ рдкрд╛рдПрдВ</title>
      <meta
        name="description"
        content="рдЕрдкрдиреЗ рд╕рд╡рд╛рд▓реЛрдВ рдХреЗ рдЬрд╡рд╛рдм рд╣рд┐рдВрджреА рдореЗрдВ рд╕реБрдиреЗрдВ! AI рд╡реЙрдпрд╕ рдЪреИрдЯрдмреЙрдЯ рд╕реЗ рддреБрд░рдВрдд рдЙрддреНрддрд░ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред"
      />
      <meta name="keywords" content="AI рдЪреИрдЯрдмреЙрдЯ, рд╣рд┐рдВрджреА рд╡реЙрдпрд╕ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ, AI рдЙрддреНрддрд░, GPT рдЪреИрдЯ, рд╢рд╛рдпрд░реА рдореЛрдб" />
      <meta property="og:title" content="рд╣рд┐рдВрджреА рд╡реЙрдпрд╕ AI рдЪреИрдЯрдмреЙрдЯ - рдмреЛрд▓рдХрд░ рдЙрддреНрддрд░ рдкрд╛рдПрдВ" />
      <meta
        property="og:description"
        content="рдЕрдкрдиреЗ рд╕рд╡рд╛рд▓реЛрдВ рдХреЗ рдЬрд╡рд╛рдм рд╣рд┐рдВрджреА рдореЗрдВ рд╕реБрдиреЗрдВ! AI рд╡реЙрдпрд╕ рдЪреИрдЯрдмреЙрдЯ рд╕реЗ рддреБрд░рдВрдд рдЙрддреНрддрд░ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред"
      />
      <meta property="og:image" content="/chatbot-thumbnail.png" />
      <meta property="og:type" content="website" />
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:title" content="рд╣рд┐рдВрджреА рд╡реЙрдпрд╕ AI рдЪреИрдЯрдмреЙрдЯ" />
      <meta name="twitter:image" content="/chatbot-thumbnail.png" />

      <div className="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-6">
        <h1 className="text-3xl font-bold mb-6">ЁЯОЩ рд╡реЙрдпрд╕ AI рдЪреИрдЯрдмреЙрдЯ</h1>

        <div className="flex gap-4 mb-4">
          <select onChange={(e) => setLanguage(e.target.value)} value={language} className="p-2 bg-gray-800 text-white rounded">
            <option value="hi-IN">рд╣рд┐рдВрджреА</option>
            <option value="en-US">рдЕрдВрдЧреНрд░реЗрдЬрд╝реА</option>
          </select>

          <label className="flex items-center gap-2 cursor-pointer">
            <input type="checkbox" checked={jokeMode} onChange={() => setJokeMode(!jokeMode)} className="hidden" />
            <span className={`p-2 rounded ${jokeMode ? 'bg-green-600' : 'bg-gray-700'}`}>рд╢рд╛рдпрд░рд╛рдирд╛ рдореЛрдб ЁЯОн</span>
          </label>
        </div>

        {!listening && !processing && (
          <button onClick={() => setListening(true)} className="bg-blue-600 hover:bg-blue-500 text-white px-6 py-2 rounded-lg shadow-md">
            ЁЯОд рдмрд╛рдд рдХрд░рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ
          </button>
        )}

        {processing && <p className="text-yellow-400 mt-4">AI рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдкреНрд░реЛрд╕реЗрд╕ рд╣реЛ рд░рд╣реА рд╣реИ...</p>}

        {response && (
          <div className="mt-6 bg-gray-800 p-4 rounded-lg shadow-lg max-w-md text-center">
            <h2 className="text-lg font-semibold">ЁЯдЦ AI рдЙрддреНрддрд░:</h2>
            <p className="mt-2 text-gray-300">{response}</p>
            <pre className="mt-4 text-sm text-gray-400 bg-gray-700 p-2 rounded">{JSON.stringify(response, null, 2)}</pre>
          </div>
        )}

        {error && <p className="text-red-500 mt-4">{error}</p>}
      </div>
    </>
  );
};

export default Chatbot;
